{"timestamp":"2025-08-14T00:00:01.869400","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-14T00:00:01.869870","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_api_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-14T00:00:01.907294Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-14T00:00:01.907573Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-14T00:00:01.907822Z","level":"info","event":"Current task name:extract_task","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-14T00:00:01.907995Z","level":"info","event":"Dag name:etl_api_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-14T00:00:01.911537","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-14T00:00:01.920006","level":"info","event":"Connection Retrieved 'http_demo_api'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-14T00:00:01.967594","level":"info","event":"Done. Returned value was: [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'}, {'userId': 1, 'id': 2, 'title': 'qui est esse', 'body': 'est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla'}, {'userId': 1, 'id': 3, 'title': 'ea molestias quasi exercitationem repellat qui ipsa sit aut', 'body': 'et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut'}, {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit'}, {'userId': 1, 'id': 5, 'title': 'nesciunt quas odio', 'body': 'repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque'}]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-14T00:00:01.967858","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198a5e0-586a-7786-9462-d5288f0907a1'), task_id='extract_task', dag_id='etl_api_pipeline', run_id='scheduled__2025-08-14T00:00:00+00:00', try_number=1, map_index=-1, hostname='4dcf1c469b5a', context_carrier={}, task=<Task(PythonOperator): extract_task>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 8, 14, 0, 0, 1, 390883, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/etl_api_pipeline/runs/scheduled__2025-08-14T00%3A00%3A00%2B00%3A00/tasks/extract_task?try_number=1')","logger":"task"}
{"timestamp":"2025-08-14T00:00:02.001042Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-14T00:00:02.001561Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-14T00:00:02.001999Z","level":"info","event":"Task operator:<Task(PythonOperator): extract_task>","chan":"stdout","logger":"task"}
